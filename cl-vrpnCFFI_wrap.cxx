/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCFFI
#define SWIGCFFI
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>


/* #include "vrpn_Types.h" */
/* #include "vrpn_Configure.h" */
#include "vrpn_BaseClass.h"
#include "vrpn_Analog.h"
	#include <time.h>
/* #include "vrpn_Analog_Output.h" */
/* #include "vrpn_Analog_USDigital_A2.h" */
/* #include "vrpn_Auxiliary_Logger.h" */
#include "vrpn_Connection.h"
#include "vrpn_Button.h"
/* #include "vrpn_Button_NI_DIO24.h" */
/* #include "vrpn_Button_USB.h" */
/* #include "vrpn_Dial.h" */
/* #include "vrpn_ForceDevice.h" */
/* #include "vrpn_ForceDeviceServer.h" */
/* #include "vrpn_Poser.h" */
/* #include "vrpn_Poser_Analog.h" */
/* #include "vrpn_Poser_Tek4662.h" */
/* #include "vrpn_Text.h" */
#include "vrpn_Tracker.h"
/* #include "vrpn_Tracker_3DMouse.h" */
/* #include "vrpn_Tracker_AnalogFly.h" */
/* #include "vrpn_Tracker_ButtonFly.h" */
/* #include "vrpn_Tracker_Crossbow.h" */
/* #include "vrpn_Tracker_DTrack.h" */
/* #include "vrpn_Tracker_Fastrak.h" */
/* #include "vrpn_Tracker_Liberty.h" */
/* #include "vrpn_Tracker_MotionNode.h" */
/* #include "vrpn_Tracker_isense.h" */
#include "quat.h"

EXPORT vrpn_BaseClassUnique *_wrap_new_vrpn_BaseClassUnique () {
  vrpn_BaseClassUnique * lresult = (vrpn_BaseClassUnique *)0 ;
  vrpn_BaseClassUnique *result = 0 ;

  try {
    result = (vrpn_BaseClassUnique *)new vrpn_BaseClassUnique();
    lresult = result;
    return lresult;
  } catch (...) {
    return (vrpn_BaseClassUnique *)0;
  }
}


EXPORT void _wrap_vrpn_BaseClass_mainloop (vrpn_BaseClass *larg1) {
  vrpn_BaseClass *arg1 = (vrpn_BaseClass *) 0 ;

  arg1 = larg1;
  try {
    (arg1)->mainloop();

  } catch (...) {

  }
}


EXPORT vrpn_Analog_Remote *_wrap_new_vrpn_Analog_Remote__SWIG_0 (char *larg1, vrpn_Connection *larg2) {
  vrpn_Analog_Remote * lresult = (vrpn_Analog_Remote *)0 ;
  char *arg1 = (char *) 0 ;
  vrpn_Connection *arg2 = (vrpn_Connection *) 0 ;
  vrpn_Analog_Remote *result = 0 ;

  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (vrpn_Analog_Remote *)new vrpn_Analog_Remote((char const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vrpn_Analog_Remote *)0;
  }
}


EXPORT vrpn_Analog_Remote *_wrap_new_vrpn_Analog_Remote__SWIG_1 (char *larg1) {
  vrpn_Analog_Remote * lresult = (vrpn_Analog_Remote *)0 ;
  char *arg1 = (char *) 0 ;
  vrpn_Analog_Remote *result = 0 ;

  arg1 = larg1;
  try {
    result = (vrpn_Analog_Remote *)new vrpn_Analog_Remote((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vrpn_Analog_Remote *)0;
  }
}


EXPORT void _wrap_vrpn_Analog_Remote_mainloop (vrpn_Analog_Remote *larg1) {
  vrpn_Analog_Remote *arg1 = (vrpn_Analog_Remote *) 0 ;

  arg1 = larg1;
  try {
    (arg1)->mainloop();

  } catch (...) {

  }
}


EXPORT int _wrap_vrpn_Analog_Remote_register_change_handler (vrpn_Analog_Remote *larg1, void *larg2, vrpn_ANALOGCHANGEHANDLER larg3) {
  int lresult = (int)0 ;
  vrpn_Analog_Remote *arg1 = (vrpn_Analog_Remote *) 0 ;
  void *arg2 = (void *) 0 ;
  vrpn_ANALOGCHANGEHANDLER arg3 = (vrpn_ANALOGCHANGEHANDLER) 0 ;
  int result;

  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->register_change_handler(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vrpn_Analog_Remote_unregister_change_handler (vrpn_Analog_Remote *larg1, void *larg2, vrpn_ANALOGCHANGEHANDLER larg3) {
  int lresult = (int)0 ;
  vrpn_Analog_Remote *arg1 = (vrpn_Analog_Remote *) 0 ;
  void *arg2 = (void *) 0 ;
  vrpn_ANALOGCHANGEHANDLER arg3 = (vrpn_ANALOGCHANGEHANDLER) 0 ;
  int result;

  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->unregister_change_handler(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT vrpn_Button_Remote *_wrap_new_vrpn_Button_Remote__SWIG_0 (char *larg1, vrpn_Connection *larg2) {
  vrpn_Button_Remote * lresult = (vrpn_Button_Remote *)0 ;
  char *arg1 = (char *) 0 ;
  vrpn_Connection *arg2 = (vrpn_Connection *) 0 ;
  vrpn_Button_Remote *result = 0 ;

  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (vrpn_Button_Remote *)new vrpn_Button_Remote((char const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vrpn_Button_Remote *)0;
  }
}


EXPORT vrpn_Button_Remote *_wrap_new_vrpn_Button_Remote__SWIG_1 (char *larg1) {
  vrpn_Button_Remote * lresult = (vrpn_Button_Remote *)0 ;
  char *arg1 = (char *) 0 ;
  vrpn_Button_Remote *result = 0 ;

  arg1 = larg1;
  try {
    result = (vrpn_Button_Remote *)new vrpn_Button_Remote((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vrpn_Button_Remote *)0;
  }
}


EXPORT void _wrap_vrpn_Button_Remote_mainloop (vrpn_Button_Remote *larg1) {
  vrpn_Button_Remote *arg1 = (vrpn_Button_Remote *) 0 ;

  arg1 = larg1;
  try {
    (arg1)->mainloop();

  } catch (...) {

  }
}


EXPORT int _wrap_vrpn_Button_Remote_register_change_handler (vrpn_Button_Remote *larg1, void *larg2, vrpn_BUTTONCHANGEHANDLER larg3) {
  int lresult = (int)0 ;
  vrpn_Button_Remote *arg1 = (vrpn_Button_Remote *) 0 ;
  void *arg2 = (void *) 0 ;
  vrpn_BUTTONCHANGEHANDLER arg3 = (vrpn_BUTTONCHANGEHANDLER) 0 ;
  int result;

  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->register_change_handler(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vrpn_Button_Remote_unregister_change_handler (vrpn_Button_Remote *larg1, void *larg2, vrpn_BUTTONCHANGEHANDLER larg3) {
  int lresult = (int)0 ;
  vrpn_Button_Remote *arg1 = (vrpn_Button_Remote *) 0 ;
  void *arg2 = (void *) 0 ;
  vrpn_BUTTONCHANGEHANDLER arg3 = (vrpn_BUTTONCHANGEHANDLER) 0 ;
  int result;

  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->unregister_change_handler(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT vrpn_Tracker_Remote *_wrap_new_vrpn_Tracker_Remote__SWIG_0 (char *larg1, vrpn_Connection *larg2) {
  vrpn_Tracker_Remote * lresult = (vrpn_Tracker_Remote *)0 ;
  char *arg1 = (char *) 0 ;
  vrpn_Connection *arg2 = (vrpn_Connection *) 0 ;
  vrpn_Tracker_Remote *result = 0 ;

  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (vrpn_Tracker_Remote *)new vrpn_Tracker_Remote((char const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vrpn_Tracker_Remote *)0;
  }
}


EXPORT vrpn_Tracker_Remote *_wrap_new_vrpn_Tracker_Remote__SWIG_1 (char *larg1) {
  vrpn_Tracker_Remote * lresult = (vrpn_Tracker_Remote *)0 ;
  char *arg1 = (char *) 0 ;
  vrpn_Tracker_Remote *result = 0 ;

  arg1 = larg1;
  try {
    result = (vrpn_Tracker_Remote *)new vrpn_Tracker_Remote((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vrpn_Tracker_Remote *)0;
  }
}


EXPORT void _wrap_vrpn_Tracker_Remote_mainloop (vrpn_Tracker_Remote *larg1) {
  vrpn_Tracker_Remote *arg1 = (vrpn_Tracker_Remote *) 0 ;

  arg1 = larg1;
  try {
    (arg1)->mainloop();

  } catch (...) {

  }
}


EXPORT int _wrap_vrpn_Tracker_Remote_register_change_handler (vrpn_Tracker_Remote *larg1, void *larg2, vrpn_TRACKERCHANGEHANDLER larg3) {
  int lresult = (int)0 ;
  vrpn_Tracker_Remote *arg1 = (vrpn_Tracker_Remote *) 0 ;
  void *arg2 = (void *) 0 ;
  vrpn_TRACKERCHANGEHANDLER arg3 = (vrpn_TRACKERCHANGEHANDLER) 0 ;
  int result;

  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->register_change_handler(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vrpn_Tracker_Remote_unregister_change_handler (vrpn_Tracker_Remote *larg1, void *larg2, vrpn_TRACKERCHANGEHANDLER larg3) {
  int lresult = (int)0 ;
  vrpn_Tracker_Remote *arg1 = (vrpn_Tracker_Remote *) 0 ;
  void *arg2 = (void *) 0 ;
  vrpn_TRACKERCHANGEHANDLER arg3 = (vrpn_TRACKERCHANGEHANDLER) 0 ;
  int result;

  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->unregister_change_handler(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


