;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(cl:in-package :vrpn)

;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant vrpn_CHANNEL_MAX 128)

(cffi:defcstruct vrpn_ANALOGCB
	( msg-time :pointer)
	( num-channel :int)
	( channel :pointer))

(cffi:defcstruct vrpn_BUTTONCB
	( msg-time :pointer)
	( button :int)
	( state :int))

(cffi:defcstruct vrpn_TRACKERCB
	( msg-time :pointer)
	( sensor :int)
	( pos :pointer)
	( quat :pointer))

(cffi:defcfun ("_wrap_new_vrpn_BaseClassUnique" new_vrpn_BaseClassUnique) :pointer)

(cffi:defcfun ("_wrap_vrpn_BaseClass_mainloop" vrpn_BaseClass_mainloop) :void
  (self :pointer))

(cffi:defctype vrpn_ANALOGCHANGEHANDLER :pointer)

(cffi:defcfun ("_wrap_new_vrpn_Analog_Remote__SWIG_0" new_vrpn_Analog_Remote) :pointer
  (name :string)
  (c :pointer))

(cffi:defcfun ("_wrap_new_vrpn_Analog_Remote__SWIG_1" new_vrpn_Analog_Remote) :pointer
  (name :string))

(cffi:defcfun ("_wrap_vrpn_Analog_Remote_mainloop" vrpn_Analog_Remote_mainloop) :void
  (self :pointer))

(cffi:defcfun ("_wrap_vrpn_Analog_Remote_register_change_handler" vrpn_Analog_Remote_register_change_handler) :int
  (self :pointer)
  (userdata :pointer)
  (handler :pointer))

(cffi:defcfun ("_wrap_vrpn_Analog_Remote_unregister_change_handler" vrpn_Analog_Remote_unregister_change_handler) :int
  (self :pointer)
  (userdata :pointer)
  (handler :pointer))

(cffi:defctype vrpn_BUTTONCHANGEHANDLER :pointer)

(cffi:defcfun ("_wrap_new_vrpn_Button_Remote__SWIG_0" new_vrpn_Button_Remote) :pointer
  (name :string)
  (cn :pointer))

(cffi:defcfun ("_wrap_new_vrpn_Button_Remote__SWIG_1" new_vrpn_Button_Remote) :pointer
  (name :string))

(cffi:defcfun ("_wrap_vrpn_Button_Remote_mainloop" vrpn_Button_Remote_mainloop) :void
  (self :pointer))

(cffi:defcfun ("_wrap_vrpn_Button_Remote_register_change_handler" vrpn_Button_Remote_register_change_handler) :int
  (self :pointer)
  (userdata :pointer)
  (handler :pointer))

(cffi:defcfun ("_wrap_vrpn_Button_Remote_unregister_change_handler" vrpn_Button_Remote_unregister_change_handler) :int
  (self :pointer)
  (userdata :pointer)
  (handler :pointer))

(cffi:defctype vrpn_TRACKERCHANGEHANDLER :pointer)

(cffi:defcfun ("_wrap_new_vrpn_Tracker_Remote__SWIG_0" new_vrpn_Tracker_Remote) :pointer
  (name :string)
  (c :pointer))

(cffi:defcfun ("_wrap_new_vrpn_Tracker_Remote__SWIG_1" new_vrpn_Tracker_Remote) :pointer
  (name :string))

(cffi:defcfun ("_wrap_vrpn_Tracker_Remote_mainloop" vrpn_Tracker_Remote_mainloop) :void
  (self :pointer))

(cffi:defcfun ("_wrap_vrpn_Tracker_Remote_register_change_handler" vrpn_Tracker_Remote_register_change_handler) :int
  (self :pointer)
  (userdata :pointer)
  (handler :pointer))

(cffi:defcfun ("_wrap_vrpn_Tracker_Remote_unregister_change_handler" vrpn_Tracker_Remote_unregister_change_handler) :int
  (self :pointer)
  (userdata :pointer)
  (handler :pointer))


